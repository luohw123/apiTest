<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-autowire="byName">
    <context:component-scan base-package="com.javaapi.test.appframework.readWriteSeparate"/>

    <!-- config mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:com/javaapi/test/appframework/readWriteSeparate/mybatis/config/mybatis-config.xml"/>
        <property name="typeAliasesPackage" value="com.javaapi.test.appframework.readWriteSeparate.entity"/>
        <property name="mapperLocations" value="classpath*:com/javaapi/test/appframework/readWriteSeparate/mybatis/mapper/*Mapper.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.javaapi.test.appframework.readWriteSeparate.dao"/>
        <!--暂时不需要 ,应该是根据注解扫描什么 -->
        <property name="annotationClass" value="com.javaapi.test.appframework.readWriteSeparate.dao.MyBatisRepository"/>
    </bean>

    <bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="initialSize" value="20"/>
        <property name="maxActive" value="50"/>
        <property name="maxIdle" value="10"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="defaultAutoCommit" value="false"/>
    </bean>
    <bean id="masterDataSource" parent="parentDataSource">
        <property name="url" value="jdbc:mysql://127.0.0.1:3307/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <bean id="slaveDataSource" parent="parentDataSource">
        <property name="url" value="jdbc:mysql://192.168.71.117:3306/system32?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false"/>
        <property name="username" value="cache"/>
        <property name="password" value="test2"/>
    </bean>
     <!-- 配置自定义动态数据源-->
    <bean id="dataSource" class="com.javaapi.test.appframework.readWriteSeparate.database.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="slave" value-ref="slaveDataSource" />
                <entry key="master" value-ref="masterDataSource" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource" />
    </bean>

    <!--开启自动代理功能 true使用CGLIB   -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 声明AOP 切换数据源通知 类中加@Component 自动扫描xml中不用配<bean>了
     -->
    <bean id="dataSourceAdvice" class="com.javaapi.test.appframework.readWriteSeparate.aop.DataSourceAdvice" />
    <!-- 配置通知和切点 注意这个一定要配置在事务声明(txAdvice)之前 否则就会出现数据源切换出错,注意order 的使用  -->
    <aop:config>
        <aop:advisor
                pointcut="execution(* com.javaapi.test.appframework.readWriteSeparate.manager.impl.*ManagerImpl.*(..))"
                advice-ref="dataSourceAdvice"  order="0"/>
    </aop:config>

    <!-- 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对增、删、改方法进行事务支持 -->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <!-- 对查找方法进行只读事务 -->
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <!-- 对其它方法进行只读事务 -->
            <!--<tx:method name="*" propagation="SUPPORTS" read-only="true" />-->
        </tx:attributes>
    </tx:advice>
    <!--开启注解式事务扫描 要开启事务的service实现类中 加上@Transactional注解-->
    <tx:annotation-driven order="2"/>
    <!--未开启事务扫描时 需指定aop配置 声明那些类的哪些方法参与事务
    <aop:config>
        <aop:advisor
                pointcut="execution(* tv.acfun.service.vote.manager..*Service.*(..))"
                advice-ref="txAdvice" />
        <aop:advisor
                pointcut="execution(* tv.acfun.service.vote.manager..*ServiceImpl.*(..))"
                advice-ref="txAdvice" />
    </aop:config>
    -->
    <!-- config redis -->


</beans>
